-------------------Homework clase 6 -------------

1 --Crear una vista con el resultado del ejercicio de la Parte 1 - Clase 2 - Ejercicio 10, donde unimos la cantidad 
----de gente que ingresa a tienda usando los dos sistemas.

create or replace view stg.Ej2clase10 as select tienda,date(fecha::TEXT), conteo from stg.market_count
union all
select tienda,date(fecha::TEXT), conteo from stg.super_store_count

2 --- Recibimos otro archivo con ingresos a tiendas de meses anteriores. Ingestar el archivo y agregarlo a la vista 
---del ejercicio anterior (Ejercicio 1 Clase 6). Cual hubiese sido la diferencia si hubiesemos tenido una tabla? 
---(contestar la ultima pregunta con un texto escrito en forma de comentario)

-- View: stg.ej2clase10

-- DROP VIEW stg.ej2clase10;

CREATE OR REPLACE VIEW stg.ej2clase10
 AS
 SELECT market_count.tienda,
    market_count.fecha::text::date AS date,
    market_count.conteo
   FROM stg.market_count
UNION ALL
 SELECT super_store_count.tienda,
    super_store_count.fecha::text::date AS date,
    super_store_count.conteo
   FROM stg.super_store_count
UNION ALL
 SELECT super_store_count_september.tienda,
    super_store_count_september.fecha::text::date AS date,
    super_store_count_september.conteo
   FROM stg.super_store_count_september;
ALTER TABLE stg.ej2clase10
    OWNER TO postgres;

select * from stg.ej2clase10

--- 3 Crear una vista con el resultado del ejercicio de la Parte 1 - Clase 3 - Ejercicio 10, donde calculamos el 7
--- margen bruto en dolares. Agregarle la columna de ventas, descuentos, y creditos en dolares para poder reutilizarla
---en un futuro.    ---DESCONTAR DESCUENTO

select * from stg.Margenonly

create or replace view stg.Margenonly as select  
(ols.venta/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso
when ols.moneda = 'URU' then maver.cotizacion_usd_uru
else maver.cotizacion_usd_eur end
)) - (ols.impuestos/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso
when ols.moneda = 'URU' then maver.cotizacion_usd_uru
else maver.cotizacion_usd_eur end
)) - co.costo_promedio_usd as Margen
from stg.order_line_sale ols
inner join stg.monthly_average_fx_rate maver
on date_part('month',ols.fecha) = date_part('month',maver.mes)
left join stg.cost co
on ols.producto = co.codigo_producto

-- View: stg.margenonly

-- DROP VIEW stg.margenonly;

CREATE OR REPLACE VIEW stg.margenonly
 AS
 SELECT ols.venta /
        CASE
            WHEN ols.moneda::text = 'ARS'::text THEN maver.cotizacion_usd_peso
            WHEN ols.moneda::text = 'URU'::text THEN maver.cotizacion_usd_uru
            ELSE maver.cotizacion_usd_eur
        END - ols.impuestos /
        CASE
            WHEN ols.moneda::text = 'ARS'::text THEN maver.cotizacion_usd_peso
            WHEN ols.moneda::text = 'URU'::text THEN maver.cotizacion_usd_uru
            ELSE maver.cotizacion_usd_eur
        END - co.costo_promedio_usd AS margen,
		ols.venta /
        CASE
            WHEN ols.moneda::text = 'ARS'::text THEN maver.cotizacion_usd_peso
            WHEN ols.moneda::text = 'URU'::text THEN maver.cotizacion_usd_uru
            ELSE maver.cotizacion_usd_eur
        END AS ventaendolares,
		ols.impuestos /
        CASE
            WHEN ols.moneda::text = 'ARS'::text THEN maver.cotizacion_usd_peso
            WHEN ols.moneda::text = 'URU'::text THEN maver.cotizacion_usd_uru
            ELSE maver.cotizacion_usd_eur
        END as Impendolares
   FROM stg.order_line_sale ols
     JOIN stg.monthly_average_fx_rate maver ON date_part('month'::text, ols.fecha) = date_part('month'::text, maver.mes)
     LEFT JOIN stg.cost co ON ols.producto::text = co.codigo_producto::text;

ALTER TABLE stg.margenonly
    OWNER TO postgres;

--- 4 Generar una query que me sirva para verificar que el nivel de agregacion de la tabla de ventas (y de la vista) 
--- no se haya afectado. Recordas que es el nivel de agregacion/detalle? Lo vimos en la teoria de la parte 1! 
--- Nota: La orden M999000061 parece tener un problema verdad? Lo vamos a solucionar mas adelante.

select codigo_producto,count(1)
from stg.product_master
group by codigo_producto
having count(1)>1


--- 5 Calcular el margen bruto a nivel Subcategoria de producto. Usar la vista creada.----MAL!!

select pm.subcategoria,sum(mo.margen) as Margen
from stg.margenonly as mo
left join stg.product_master as pm
on mo.producto=pm.codigo_producto
group by pm.subcategoria

--- 6 Calcular la contribucion de las ventas brutas de cada producto al total de la orden. 
----Por esta vez, si necesitas usar una subquery, podes utilizarla.

select * from stg.order_line_sale

SELECT orden, 
       venta, 
       SUM(venta) OVER (PARTITION BY orden) * 100 AS percentage,
	   venta/SUM(venta) OVER (PARTITION BY orden) * 100 AS contribucion_a_la_orden
FROM stg.order_line_sale

--- 7 Calcular las ventas por proveedor, para eso cargar la tabla de proveedores por producto. 
--- Agregar el nombre el proveedor en la vista del punto 3.
--- Verificar que el nivel de detalle de la vista anterior no se haya modificado, en caso contrario que se deberia 
--- ajustar? Que decision tomarias para que no se genereren duplicados?

--- Se pide correr la query de validacion.
--- Crear una nueva query que no genere duplicacion.
--- Explicar brevemente (con palabras escrito tipo comentario) que es lo que sucedia

----------------Homework clase 7 ----------------------

--- 1 Calcular el porcentaje de valores null de la tabla stg.order_line_sale para la columna creditos y descuentos. 
--- (porcentaje de nulls en cada columna)

select * from stg.order_line_sale

SELECT 
   (COUNT(CASE WHEN descuento IS NULL THEN 1 END)::float / COUNT(*)::float) * 100 AS null_percentage_descuento,
   (COUNT(CASE WHEN creditos IS NULL THEN 1 END)::float / COUNT(*)::float) * 100 AS null_percentage_creditos
FROM stg.order_line_sale;

SELECT SUM(CASE WHEN descuento IS NULL THEN 1 ELSE 0 END) AS cant_nulos_descuento,
       COUNT(*) AS total_filas,
       (SUM(CASE WHEN descuento IS NULL THEN 1 END)::float / COUNT(*)::float) * 100 AS null_percentage_descuento
FROM stg.order_line_sale;

--- 2 La columna "is_walkout" se refiere a los clientes que llegaron a la tienda y se fueron con el producto en la mano
--- (es decia habia stock disponible). Responder en una misma query:
--Cuantas ordenes fueron "walkout" por tienda?
--Cuantas ventas brutas en USD fueron "walkout" por tienda?
--Cual es el porcentaje de las ventas brutas "walkout" sobre el total de ventas brutas por tienda?

SELECT 
  tienda,
  COUNT(CASE WHEN is_walkout = 'true' THEN 1 END) AS Qwo,
  SUM(CASE WHEN is_walkout = 'true' THEN venta END) AS sales_when_walkout_true,
  SUM(CASE WHEN is_walkout = 'true' THEN venta END) / SUM(venta) AS porcentaje
FROM stg.order_line_sale
GROUP BY tienda
order by tienda) 

select distinct(tienda),count(case when is_walkout= 'true' then 1 end) over(partition by tienda) as Qwo,
SUM(CASE WHEN is_walkout = 'true' THEN venta END) OVER (PARTITION BY tienda) AS sales_when_walkout_true,
SUM(CASE WHEN is_walkout = 'true' THEN venta END) OVER (PARTITION BY tienda)/ sum(venta) OVER (PARTITION BY tienda) as porcentaje
FROM stg.order_line_sale
order by tienda

---3 Siguiendo el nivel de detalle de la tabla ventas, hay una orden que no parece cumplirlo. 
---Como identificarias duplicados utilizando una windows function? Nota: Esto hace referencia a la orden M999000061.
---Tenes que generar una forma de excluir los casos duplicados, para este caso particular y a nivel general, 
---si llegan mas ordenes con duplicaciones.

WITH cte AS (
    SELECT orden, ROW_NUMBER() OVER (PARTITION BY orden) AS rn
    FROM stg.order_line_sale
)
DELETE FROM stg.order_line_sale
WHERE orden IN (
    SELECT orden
    FROM cte
    WHERE rn > 1
);


--- 4 Obtener las ventas totales en USD de productos que NO sean de la categoria "TV" NI esten en tiendas de Argentina.

select * from stg.product_master
select * from stg.store_master
select * from stg.order_line_sale

SELECT SUM(sales) AS total_sales
FROM (
  SELECT DISTINCT 
         SUM(ols.venta / 
             CASE 
                WHEN ols.moneda = 'ARS' THEN maver.cotizacion_usd_peso
                WHEN ols.moneda = 'URU' THEN maver.cotizacion_usd_uru
                ELSE maver.cotizacion_usd_eur 
             END) 
             OVER (PARTITION BY sm.pais ORDER BY sm.pais) AS sales
  FROM stg.order_line_sale AS ols
  LEFT JOIN stg.product_master AS pm
    ON ols.producto = pm.codigo_producto
  LEFT JOIN stg.store_master AS sm
    ON ols.tienda = sm.codigo_tienda
  INNER JOIN stg.monthly_average_fx_rate maver
    ON date_part('month', ols.fecha) = date_part('month', maver.mes)				
  WHERE subcategoria <> 'TV' AND sm.pais <> 'Argentina'
) subquery;		

--- 5 El gerente de ventas quiere ver el total de unidades vendidas por dia junto con otra columna con la cantidad de 
--- unidades vendidas una semana atras y la diferencia entre ambos. Nota: resolver en dos querys usando en una CTEs y 
--- en la otra windows functions.

create or replace view stg.cantidad as 
select distinct(fecha), sum(cantidad) over (partition by fecha) as cantpordia
from stg.order_line_sale
order by fecha

select * from stg.cantidad

SELECT fecha, LAG(sum_cantidad, 7) OVER (ORDER BY fecha) AS sales_7_days_ago
FROM (
  SELECT fecha, SUM(cantidad) AS sum_cantidad
  FROM stg.order_line_sale
  GROUP BY fecha
) subquery
ORDER BY fecha;
 ----------------------------- 5 esta mal -----------------
--- 6 Crear una vista de inventario con la cantidad de inventario por dia, tienda y producto, que ademas va a contar 
---con los siguientes datos:
-- Nombre y categorias de producto,Pais y nombre de tienda,Costo del inventario por linea (recordar que si la linea 
--dice 4 unidades debe reflejar el costo total de esas 4 unidades)
-- Una columna llamada "is_last_snapshot" para el ultimo dia disponible de inventario.
-- Ademas vamos a querer calcular una metrica llamada "Average days on hand (DOH)" que mide cuantos dias de venta nos 
--alcanza el inventario. Para eso DOH = Unidades en Inventario Promedio / Promedio diario Unidades vendidas ultimos 7 
--dias
---Notas:
---Antes de crear la columna DOH, conviene crear una columna que refleje el Promedio diario Unidades vendidas ultimos 7 dias.
---El nivel de agregacion es dia/tienda/sku.
---El Promedio diario Unidades vendidas ultimos 7 dias tiene que calcularse para cada dia.
select * from stg.suppliers
select * from stg.suppliers
select * from stg.inventory
select * from stg.product_master
select * from stg.store_master
select * from stg.cost
select * from stg.order_line_sale

WITH last_week AS (
  SELECT 
    i.fecha,
	i.sku,
	i.tienda,
    AVG(LAG(ols.cantidad, 7, 0) OVER (ORDER BY i.fecha)) AS avg_sales_7_days_ago
  FROM stg.inventory i
  LEFT JOIN stg.order_line_sale as ols
    ON i.sku = ols.producto
  GROUP BY i.fecha,i.sku,i.tienda
)
SELECT * FROM last_week;

select i.fecha,i.tienda, i.sku,(i.stock_final + i.inicial)/2 as q_i_pordia, pm.nombre, pm.categoria,sm.pais,
((i.stock_final + i.inicial)/2)*c.costo_promedio_usd as costo_inve_pordia,
from stg.inventory i 
left join stg.product_master as pm
on i.sku=pm.codigo_producto
left join stg.store_master as sm
on i.tienda=sm.codigo_tienda
left join stg.cost as c
on i.sku=c.codigo_producto
left join stg.order_line_sale as ols
on i.sku=ols.producto
GROUP BY i.fecha, i.tienda, i.sku, pm.nombre, pm.categoria, sm.pais
ORDER BY i.fecha;

-------------------------------Homework clase 8--------------------------------

1--- Realizar el Ejercicio 5 de la clase 6 donde calculabamos la contribucion de las ventas brutas de cada producto 
----  utilizando una window function. (Venta- Imp - Costo)

--- 5 Calcular el margen bruto a nivel Subcategoria de producto

select distinct(pm.subcategoria),sum((ols.venta/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso
when ols.moneda = 'URU' then maver.cotizacion_usd_uru
else maver.cotizacion_usd_eur end
)) - (ols.impuestos/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso
when ols.moneda = 'URU' then maver.cotizacion_usd_uru
else maver.cotizacion_usd_eur end
)) - co.costo_promedio_usd) over (partition by pm.subcategoria order by pm.subcategoria)
from stg.order_line_sale ols
inner join stg.monthly_average_fx_rate maver
on date_part('month',ols.fecha) = date_part('month',maver.mes)
left join stg.cost co
on ols.producto = co.codigo_producto
left join stg.product_master as pm
on ols.producto = pm.codigo_producto

2--- La regla de pareto nos dice que aproximadamente un 20% de los productos generan un 80% de las ventas.
--- Armar una vista a nivel sku donde se pueda identificar por orden de contribucion, ese 20% aproximado de SKU mas 
--- importantes. (Nota: En este ejercicios estamos construyendo una tabla que muestra la regla de Pareto)

select * from stg.order_line_sale


SELECT producto, 
       sum((ols.venta/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso when ols.moneda = 'URU' 
		then maver.cotizacion_usd_uru else maver.cotizacion_usd_eur end))) AS sumadeventa,
       SUM(sum((ols.venta/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso when ols.moneda = 'URU' then 
		maver.cotizacion_usd_uru else maver.cotizacion_usd_eur end)))) OVER () AS total_sumadeventa,
		(sum((ols.venta/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso when ols.moneda = 'URU' 
		then maver.cotizacion_usd_uru else maver.cotizacion_usd_eur end)))) / (SUM(sum((ols.venta/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso when ols.moneda = 'URU' then 
		maver.cotizacion_usd_uru else maver.cotizacion_usd_eur end)))) OVER ()) as PARETO
FROM stg.order_line_sale as ols
INNER JOIN stg.monthly_average_fx_rate maver
ON date_part('month',ols.fecha) = date_part('month',maver.mes)
GROUP BY producto
ORDER BY sumadeventa DESC;

--- 3 Calcular el crecimiento de ventas por tienda mes a mes, con el valor nominal y el valor % de crecimiento.

select * from stg.order_line_sale 

with ventas_mes as (
    select distinct(tienda), date_part('month',ols.fecha) as mes, sum((ols.venta/(case when ols.moneda = 'ARS' then maver.cotizacion_usd_peso when ols.moneda = 'URU' 
            then maver.cotizacion_usd_uru else maver.cotizacion_usd_eur end))) over (partition by date_part('month',maver.mes) order by ols.tienda) as venta_por_mes
    FROM stg.order_line_sale as ols
    INNER JOIN stg.monthly_average_fx_rate maver
    ON date_part('month',ols.fecha) = date_part('month',maver.mes)
    order by tienda
)


select *, lead(venta_por_mes) over (partition by tienda) as venta_mes_posterior,
(venta_por_mes/lead(venta_por_mes) over (partition by tienda))*100 as crecimientoporcentual
from ventas_mes;


--- 4 Crear una vista a partir de la tabla "return_movements" que este a nivel Orden de venta, item y que contenga las
--- siguientes columnas:

select * from stg.return_movements
        Orden
        Sku
        Cantidad unidated retornadas
        Valor USD retornado (resulta de la cantidad retornada * valor USD del precio unitario bruto con que se hizo la venta)
        Nombre producto
        Primera_locacion (primer lugar registrado, de la columna "desde", para la orden/producto)
        Ultima_locacion (el ultimo lugar donde se registro, de la columna "hasta", el producto/orden)
		

---Crear una tabla calendario llamada "date" con las fechas del 2022 incluyendo el año fiscal y trimestre fiscal 
--- (en ingles Quarter). El año fiscal de la empresa comienza el primero Febrero de cada año y dura 12 meses. 
--- Realizar la tabla para 2022 y 2023. La tabla debe contener:
--Fecha (date), Mes (date), Año (date),Dia de la semana (text, ejemplo: "Monday"),"is_weekend" (boolean, indicando si
--es Sabado o Domingo),Mes (text, ejemplo: June),--Año fiscal (date),-- Año fiscal (text, ejemplo: "FY2022")
--Trimestre fiscal (text, ejemplo: Q1), Fecha del año anterior (date, ejemplo: 2021-01-01 para la fecha 2022-01-01)
--Nota: En general una tabla date es creada para muchos años mas (minimo 10), por el momento nos ahorramos ese paso y
--de la creacion de feriados.

select 
    to_char(date,'yyyymmdd'):: INT as date_id,
	to_char(date_trunc('quarter', date), 'YYYY"Q"Q') AS quarter,
    cast(date as date) as Fecha,
    case when extract(month from date) < 2 then extract(month from date) + 11 else extract(month from date) - 1 end as Mes_Fiscal,
    case when extract(month from date) < 2 then extract(year from date) - 1 else extract(year from date) end as Ano_Fiscal,
    case when date < '2023-02-01' then 1 else 2 end as Fiscal_Year,
    to_char(date, 'Month') as Mes,
    to_char(date, 'Day') as Dia_de_la_Semana,
    case when extract(dow from date) in (0,6) then true else false end as is_weekend,
    case when extract(month from date) < 2 and date <= '2023-01-31' then to_char(date_trunc('quarter', date - interval '1 month'), 'Q')
         else to_char(date_trunc('quarter', date), 'Q')
    end AS quarter
from (select cast('2022-02-01' as date) + (n || 'day')::interval as date
      from generate_series(0, 730) n) dd;
	  
    -----------------------------Ejercicios entrevista-----------------------
    
    ---Ejercicio 1
--Ejecutar el siguiente script para crear la tabla turistas dentro del esquema test.
--Cuales son las ciudades donde la afluencia de turistas es continuamente creciente.

create schema test;
drop table if exists test.turistas;
create table test.turistas(city varchar(50),days date,personas int);
insert into test.turistas values('CABA','2022-01-01',100);
insert into test.turistas values('CABA','2022-01-02',200);
insert into test.turistas values('CABA','2022-01-03',300);
insert into test.turistas values('Cordoba','2022-01-01',100);
insert into test.turistas values('Cordoba','2022-01-02',100);
insert into test.turistas values('Cordoba','2022-01-03',300);
insert into test.turistas values('Madrid','2022-01-01',100);
insert into test.turistas values('Madrid','2022-01-02',200);
insert into test.turistas values('Madrid','2022-01-03',150);
insert into test.turistas values('Punta del Este','2022-01-01',100);
insert into test.turistas values('Punta del Este','2022-01-02',300);
insert into test.turistas values('Punta del Este','2022-01-03',200);
insert into test.turistas values('Punta del Este','2022-01-04',400);

select * from test.turistas

WITH growing_or_not_growing AS (
  SELECT days, city, personas,
    CASE 
      WHEN personas > LAG(personas) OVER (PARTITION BY city) --ORDER BY days)
        THEN 'Growing'
      WHEN days = '2022-01-01' 
        THEN '-'
      ELSE 'Not Growing'
    END AS growth_status
  FROM test.turistas
), 

city_growth_trend AS (
  SELECT city, 
    CASE 
      WHEN 'Not Growing' IN (SELECT growth_status FROM growing_or_not_growing WHERE city = g.city) 
        THEN 'not always growing' 
      ELSE 'always growing' 
    END AS trend
  FROM growing_or_not_growing g
  GROUP BY city
)

SELECT g.*, t.trend AS growth_trend
FROM growing_or_not_growing g
JOIN city_growth_trend t ON g.city = t.city;

---Ejercicio 2
---Ejecutar el siguiente script para crear la tabla empleados dentro del esquema test.
---Encontrar a los empleados cuyo salario es mayor que el de su manager.

drop table if exists test.empleados;
create table test.empleados (emp_id int, empleado varchar(50), salario bigint, manager_id int);
insert into test.empleados values (1,'Clara',10000,4);
insert into test.empleados values (2,'Pedro',15000,5);
insert into test.empleados values (3,'Daniel',10000,4);
insert into test.empleados values (4,'Hernan',5000,2);
insert into test.empleados values (5,'Debora',12000,6);
insert into test.empleados values (6,'Ricardo',12000,2);
insert into test.empleados values (7,'Luciano',9000,2);
insert into test.empleados values (8,'Romina',5000,2);

select * from test.empleados

WITH agregando_salario_manager AS (
SELECT 
  e.emp_id, 
  e.salario, 
  e.empleado, 
  e.manager_id,
  m.salario AS salario_manager
FROM 
  test.empleados e 
  INNER JOIN test.empleados m 
    ON e.manager_id = m.emp_id )

select * , case when salario_manager > salario then 'Manager gana mas'
else 'Manager gana menos' END AS comparacion_salario
from agregando_salario_manager

---Ejercicio 3

--- Ejecutar el siguiente script para crear la tabla players y matches dentro del esquema test.
--- Encontrar el player_id ganador de cada grupo. El ganador es aquel que anota mas puntos (score) en caso de empate,
--- el que tenga menor player_id gana.

select * from test.players
select * from test.matches

With Grouping as (SELECT *,
       CASE WHEN first_player IN (15, 45, 30, 25) OR second_player IN (15, 45, 30, 25)
            THEN 'Group A'
		 WHEN first_player IN (10,35,50) OR second_player IN (10,35,50) then 'Group B'
         WHEN first_player IN (20,40) OR second_player IN (20,40) then 'Group C'
       END AS Group
FROM test.matches)

select g.*,case when g.first_score > g.second_score then 'Victory_first_player' else 'Victory_second_player' end
from Grouping as g 

